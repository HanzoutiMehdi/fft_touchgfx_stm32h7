/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/graph/GraphWrapAndOverwrite.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/graph/GraphLabels.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void Signal2_cfg()
    {
        // Override and implement this function in Screen1
    }
    virtual void Signal3_cfg()
    {
        // Override and implement this function in Screen1
    }
    virtual void SliderFreqCalback(int value)
    {
        // Override and implement this function in Screen1
    }
    virtual void AmplitudeCalback(int value)
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box2;
    touchgfx::Button fft;
    touchgfx::TextArea textArea1;
    touchgfx::TextArea textArea1_1;
    touchgfx::TextArea textArea1_1_2;
    touchgfx::TextArea textArea1_1_2_1;
    touchgfx::TextArea textArea1_1_1;
    touchgfx::GraphWrapAndOverwrite<100> Sinput;
    touchgfx::GraphElementGridY SinputMajorYAxisGrid;
    touchgfx::GraphLabelsX SinputMajorXAxisLabel;
    touchgfx::GraphLabelsY SinputMajorYAxisLabel;
    touchgfx::GraphElementLine SinputLine1;
    touchgfx::PainterRGB565 SinputLine1Painter;
    touchgfx::GraphWrapAndOverwrite<100> OutSign;
    touchgfx::GraphElementGridY OutSignMajorYAxisGrid;
    touchgfx::GraphLabelsX OutSignMajorXAxisLabel;
    touchgfx::GraphLabelsY OutSignMajorYAxisLabel;
    touchgfx::GraphElementLine OutSignLine1;
    touchgfx::PainterRGB565 OutSignLine1Painter;
    touchgfx::Container container1;
    touchgfx::Box box3;
    touchgfx::TextArea textArea1_2_1_2_1;
    touchgfx::TextArea textArea1_2_1_2;
    touchgfx::TextArea textArea1_2;
    touchgfx::Button ExitCfg;
    touchgfx::TextArea textArea1_2_1_1_1;
    touchgfx::ToggleButton bSignal2;
    touchgfx::ToggleButton bSignal3;
    touchgfx::Slider slider1_2;
    touchgfx::TextArea Freq_vale_2;
    touchgfx::TextArea Freq_vale_2_2;
    touchgfx::TextAreaWithTwoWildcards Freq_vale_2_2_1;
    touchgfx::TextArea Freq_vale_2_1;
    touchgfx::Slider Freq1Slider;
    touchgfx::Line line1;
    touchgfx::PainterRGB565 line1Painter;

    /*
     * Wildcard Buffers
     */
    static const uint16_t FREQ_VALE_2_2_1BUFFER1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Freq_vale_2_2_1Buffer1[FREQ_VALE_2_2_1BUFFER1_SIZE];
    static const uint16_t FREQ_VALE_2_2_1BUFFER2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Freq_vale_2_2_1Buffer2[FREQ_VALE_2_2_1BUFFER2_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Screen1ViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // SCREEN1VIEWBASE_HPP
